package uk.ac.nulondon;

import org.assertj.core.data.Percentage;
import org.junit.jupiter.api.Test;
import org.assertj.core.api.Assertions;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class GraphTest{
    //constructor included for the sole purpose of accounting for exceptions
    public GraphTest() throws IOException {
    }

    File beach = new File("src/resources/beach.png");
    BufferedImage tester1 = ImageIO.read(beach);
    File home = new File("src/resources/home.png");
    BufferedImage tester2 = ImageIO.read(home);
    File duck = new File("src/resources/duck.png");
    BufferedImage tester3 = ImageIO.read(duck);

    Graph testGraph1 = new Graph(tester1);
    Graph testGraph2 = new Graph(tester2);
    Graph testGraph3 = new Graph(tester3);

    @Test
    public void testSetEnergyGrid() {
        testGraph1.setEnergyGrid();
        testGraph2.setEnergyGrid();
        testGraph3.setEnergyGrid();

        Assertions.assertThat(testGraph1.toStringEnergy()).isEqualTo(
                "126.33641157199655 - 312.4704430466629 - 161.9663888314829 - 112.7928287712575 - 186.57438194993438 - 259.26134390696285 - 425.52268512448956 - 247.1715553573626" + System.lineSeparator() +
                "239.55746237130208 - 239.55746237130205 - 132.73365143106028 - 318.4186622113165 - 297.895209017459 - 350.46667300741854 - 464.5303482491155 - 344.486735754965" + System.lineSeparator() +
                "56.499754178423046 - 153.9119517415359 - 318.7587035848765 - 235.3824311389636 - 180.96531282111619 - 37.33333333333337 - 180.96531282111619 - 101.83319694480774" + System.lineSeparator() +
                "0.0 - 0.0 - 186.57438194993438 - 171.56339936011994 - 268.2457413972826 - 94.0 - 268.2457413972826 - 250.89041432466087" + System.lineSeparator() +
                "184.46619684315547 - 233.33333333333337 - 184.04649171095636 - 82.54022588343753 - 280.5359949176655 - 16.666666666666515 - 356.69844095226676 - 143.24260694515596" + System.lineSeparator() +
                "184.4661968431556 - 233.33333333333337 - 233.33333333333337 - 260.3416558635551 - 132.30436290782117 - 231.9999999999999 - 341.49019833013585 - 26.352313834736506" + System.lineSeparator() +
                "0.0 - 0.0 - 94.28090415820628 - 298.1423969999719 - 197.2753293130075 - 215.33333333333337 - 152.26366021550334 - 0.0" + System.lineSeparator() +
                "0.0 - 0.0 - 133.33333333333326 - 282.842712474619 - 94.28090415820644 - 0.0 - 0.0 - 0.0" + System.lineSeparator()
        );

        Assertions.assertThat(testGraph2.toStringEnergy()).isEqualTo("152.26366021550317 - 340.47189474479546 - 430.66666666666663 - 430.66666666666663 - 430.66666666666663 - 430.66666666666663 - 430.66666666666663 - 430.66666666666663 - 340.47189474479546 - 258.0667441660092 - 302.08902293492525 - 264.6389574075929 - 203.46553079630513 - 250.24432505497936 - 294.66666666666663 - 208.36079818963597" + System.lineSeparator() +
                "340.47189474479546 - 506.288455329568 - 533.6270024818625 - 547.2852191600931 - 454.78688537721825 - 303.76343134456164 - 186.9979203687095 - 196.7542178003364 - 323.3835012626477 - 281.40007107319644 - 470.752588946678 - 597.5356800132431 - 589.5158088540874 - 597.5356800132431 - 465.9089085981412 - 465.90890859814124" + System.lineSeparator() +
                "430.66666666666663 - 500.66666666666663 - 64.0 - 35.33333333333337 - 164.0 - 139.33333333333337 - 88.66666666666674 - 104.66666666666674 - 241.9999999999999 - 147.76858785125995 - 427.0924958366747 - 264.6389574075929 - 203.46553079630513 - 250.24432505497938 - 416.72159637927194 - 465.90890859814124" + System.lineSeparator() +
                "340.47189474479546 - 506.288455329568 - 533.6270024818625 - 547.2852191600931 - 340.63502788501097 - 149.62545832102833 - 433.70368788942625 - 391.87866602928113 - 397.88691860879266 - 143.8710842695254 - 287.9201278132531 - 30.666666666666657 - 30.666666666666657 - 30.666666666666657 - 287.9201278132531 - 287.10238204824736" + System.lineSeparator() +
                "152.26366021550325 - 304.65900792707765 - 144.4222205125575 - 144.42222051255746 - 295.57063453597675 - 481.19965826163155 - 77.33333333333331 - 146.0 - 507.99999999999994 - 140.15309090023266 - 492.6177242266282 - 417.3333333333333 - 417.33333333333337 - 417.3333333333333 - 492.6177242266282 - 441.6647798701836" + System.lineSeparator() +
                "0.0 - 352.5113079352522 - 465.83378056031 - 465.83378056031 - 12.666666666666629 - 560.0285706997456 - 616.547015419118 - 585.5681002240474 - 511.47390505826934 - 259.0962926961497 - 417.3333333333333 - 0.0 - 0.0 - 0.0 - 417.3333333333333 - 558.6666666666666" + System.lineSeparator() +
                "227.2169790212772 - 612.800130548289 - 445.9382119631473 - 445.9382119631473 - 475.7910372328498 - 167.60071598892407 - 314.1874882578518 - 430.66666666666663 - 340.4718947447955 - 463.6734962353477 - 417.33333333333337 - 0.0 - 0.0 - 0.0 - 417.33333333333337 - 558.6666666666666" + System.lineSeparator() +
                "508.0726107337196 - 622.7697987396484 - 199.68530797788353 - 189.18891205470902 - 405.4391309295254 - 603.3977866125206 - 508.0726107337196 - 0.0 - 0.0 - 558.6666666666666 - 417.3333333333333 - 0.0 - 0.0 - 0.0 - 417.3333333333333 - 558.6666666666666" + System.lineSeparator() +
                "642.6666666666666 - 532.6666666666666 - 54.0 - 0.6666666666666288 - 54.0 - 532.0 - 642.6666666666666 - 62.22539674441618 - 88.0 - 387.0104793298382 - 492.6177242266282 - 417.3333333333333 - 417.33333333333337 - 417.3333333333333 - 492.6177242266282 - 441.6647798701836" + System.lineSeparator() +
                "642.6666666666666 - 566.2763361547866 - 178.6349474331505 - 201.4000993048414 - 204.59662210744779 - 534.338427923311 - 600.2814154859184 - 186.67619023324855 - 176.0 - 10.842303978193675 - 387.0104793298382 - 558.6666666666666 - 558.6666666666666 - 558.6666666666666 - 441.6647798701836 - 197.51849421144223" + System.lineSeparator() +
                "642.6666666666666 - 598.0 - 288.0 - 61.33333333333334 - 288.0 - 536.6666666666666 - 554.6666666666666 - 162.3008180988486 - 28.66666666666663 - 162.3008180988486 - 229.6785192877692 - 633.5096245870653 - 801.3333333333333 - 633.5096245870653 - 283.31411699541 - 0.0" + System.lineSeparator() +
                "642.6666666666666 - 516.4515681283408 - 121.9252958896462 - 243.39268682522072 - 202.9340341643614 - 534.6704073019605 - 600.2814154859184 - 167.81272630855835 - 116.66666666666663 - 118.90238760335205 - 787.7169542418139 - 895.9179029849157 - 801.3333333333333 - 895.9179029849157 - 849.9423509862302 - 283.31411699541" + System.lineSeparator() +
                "642.6666666666666 - 419.3333333333333 - 45.33333333333334 - 113.33333333333331 - 45.33333333333334 - 532.6666666666666 - 642.6666666666666 - 118.66666666666663 - 0.0 - 522.2823842414072 - 895.9179029849157 - 283.31411699541 - 0.0 - 283.31411699541 - 895.9179029849157 - 633.5096245870653" + System.lineSeparator() +
                "689.3539648750044 - 430.24153423138705 - 149.06672629694688 - 88.5161629936087 - 40.86291445525858 - 456.81627719588886 - 645.0419452338825 - 566.6990186843257 - 529.9999999999999 - 625.511346375463 - 601.1132265315006 - 212.0 - 212.0 - 212.0 - 601.1132265315006 - 786.3876623876772" + System.lineSeparator() +
                "281.64911187898707 - 193.22065682069862 - 53.33333333333334 - 53.33333333333334 - 53.33333333333334 - 193.22065682069862 - 457.7869470494859 - 560.4523966305156 - 529.9999999999999 - 397.8034132024957 - 200.67275738264905 - 212.0 - 212.0 - 212.0 - 200.67275738264905 - 247.41014081435253" + System.lineSeparator() +
                "0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0" + System.lineSeparator()
        );
        Assertions.assertThat(testGraph3.toStringEnergy()).isEqualTo("227.6839915321233 - 288.0 - 288.0 - 288.0 - 288.0 - 307.58413483143113 - 160.99689437998487 - 154.3048929878765 - 71.69379331573971 - 67.1863081289633 - 72.00000000000006 - 72.00000000000006 - 72.00000000000006 - 72.00000000000006 - 72.00000000000006 - 56.92099788303083" + System.lineSeparator() +
                "185.32134253776596 - 215.99999999999997 - 215.99999999999997 - 215.99999999999997 - 215.99999999999997 - 170.7629936490925 - 198.21705274773922 - 313.8693995916136 - 214.75567512873786 - 245.52392958732153 - 103.46980235798277 - 144.00000000000006 - 144.00000000000006 - 144.00000000000006 - 144.00000000000006 - 108.00000000000006" + System.lineSeparator() +
                "56.92099788303083 - 72.0 - 72.0 - 72.0 - 72.0 - 85.98837130682271 - 313.86939959161367 - 310.75713990188547 - 134.0 - 310.75713990188547 - 313.86939959161367 - 85.9883713068227 - 72.0 - 72.0 - 72.0 - 56.92099788303083" + System.lineSeparator() +
                "0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 188.85973631242848 - 270.40710049848917 - 309.8218125883902 - 508.66666666666674 - 326.56631111545414 - 255.76551761330148 - 161.30716041143376 - 72.0 - 72.0 - 72.0 - 56.92099788303083" + System.lineSeparator() +
                "0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 154.3048929878765 - 240.44126101815394 - 165.58113150691753 - 1.3333333333333712 - 148.86608448908405 - 200.60907257649149 - 208.50632817468366 - 297.28400188671066 - 389.3333333333333 - 389.3333333333333 - 321.00121148957953" + System.lineSeparator() +
                "0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 72.0 - 52.0 - 193.53150762716768 - 265.24035221746414 - 284.5362699004977 - 140.99487776353988 - 466.69928457436293 - 515.7863468099515 - 461.3333333333333 - 461.3333333333333 - 364.7160234727531" + System.lineSeparator() +
                "0.0 - 0.0 - 85.79562278396779 - 191.84484471688162 - 191.84484471688174 - 61.71619632550992 - 66.67999866693332 - 173.20251473668355 - 250.05954846351656 - 123.38377346942973 - 434.1520470987094 - 581.6898753727033 - 85.32421826317673 - 311.1076983939806 - 542.0653917092372 - 504.70233251337805" + System.lineSeparator() +
                "0.0 - 0.0 - 191.84484471688162 - 203.64675298172563 - 204.79800346249033 - 99.06675639296068 - 130.74232503499232 - 155.79544994069062 - 111.38322235517444 - 55.027265968790346 - 529.3830791066564 - 498.99120455397025 - 311.1076983939806 - 616.5971131946694 - 594.8090263082578 - 482.5008923422952" + System.lineSeparator() +
                "56.92099788303083 - 72.0 - 182.35252793543737 - 152.78161611339962 - 163.2176461048254 - 50.217305560710685 - 199.88051986680006 - 168.31782106743452 - 151.2055260600985 - 138.981213758471 - 483.6805649278136 - 461.3333333333333 - 473.8722284423185 - 563.4516641006377 - 169.79988221432896 - 76.07306429421067" + System.lineSeparator() +
                "185.32134253776596 - 215.99999999999997 - 283.23998462238495 - 361.41942393844846 - 272.26457720386617 - 170.83585363994555 - 120.16655108639841 - 120.16655108639841 - 269.6433858924702 - 333.5159499767424 - 459.75162376608904 - 395.9348992504253 - 392.53591484658375 - 616.5971131946694 - 568.1083621203891 - 479.683228808346" + System.lineSeparator() +
                "227.6839915321233 - 288.0 - 288.0 - 292.7038700727333 - 340.83427057735844 - 389.3404679711576 - 139.24000063838614 - 193.78395759768722 - 433.90039819704657 - 392.4487227651531 - 272.32007311658504 - 245.77134811762653 - 81.08157757605746 - 392.53591484658375 - 578.6146289966138 - 501.5376356765263" + System.lineSeparator() +
                "0.0 - 0.0 - 0.0 - 0.0 - 108.4230397819373 - 503.83087991463515 - 284.5241641759097 - 419.3722822399105 - 379.5157733510192 - 108.42303978193732 - 61.28258770283413 - 183.84776310850236 - 193.79255804998178 - 173.33333333333334 - 173.33333333333334 - 137.03203194062976" + System.lineSeparator() +
                "0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 558.6666666666666 - 419.34658166671096 - 502.42987349258783 - 476.90157381907545 - 130.5790522591157 - 0.0 - 61.28258770283413 - 137.03203194062976 - 173.33333333333334 - 173.33333333333334 - 137.03203194062976" + System.lineSeparator() +
                "0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 441.6647798701836 - 525.6160406820003 - 400.13025656931046 - 382.9641700675868 - 184.6666666666666 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0" + System.lineSeparator() +
                "0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 197.51849421144226 - 441.66477987018357 - 513.5194467809589 - 353.1272984192653 - 130.5790522591157 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0" + System.lineSeparator() +
                "0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0 - 0.0" + System.lineSeparator()
        );


    }

    @Test
    public void testSeamFinder() throws Exception {
        testGraph1.setEnergyGrid();
        testGraph2.setEnergyGrid();
        testGraph3.setEnergyGrid();

        Node[] seam1 = {testGraph1.getGraphIdx(3, 0),
                testGraph1.getGraphIdx(2, 1),
                testGraph1.getGraphIdx(1, 2),
                testGraph1.getGraphIdx(1, 3),
                testGraph1.getGraphIdx(0, 4),
                testGraph1.getGraphIdx(0, 5),
                testGraph1.getGraphIdx(1, 6),
                testGraph1.getGraphIdx(0, 7)
        };
        Assertions.assertThat(seam1).isEqualTo(testGraph1.seamFinder());

        Node[] seam2 = {
                testGraph2.getGraphIdx(8, 0),
                testGraph2.getGraphIdx(7, 1),
                testGraph2.getGraphIdx(6, 2),
                testGraph2.getGraphIdx(5, 3),
                testGraph2.getGraphIdx(4, 4),
                testGraph2.getGraphIdx(4, 5),
                testGraph2.getGraphIdx(5, 6),
                testGraph2.getGraphIdx(4, 7),
                testGraph2.getGraphIdx(3, 8),
                testGraph2.getGraphIdx(2, 9),
                testGraph2.getGraphIdx(3, 10),
                testGraph2.getGraphIdx(2, 11),
                testGraph2.getGraphIdx(2, 12),
                testGraph2.getGraphIdx(3, 13),
                testGraph2.getGraphIdx(2, 14),
                testGraph2.getGraphIdx(1, 15)
        };
        Assertions.assertThat(seam2).isEqualTo(testGraph2.seamFinder());

        Node[] seam3 = {
                testGraph3.getGraphIdx(6, 0),
                testGraph3.getGraphIdx(5, 1),
                testGraph3.getGraphIdx(4, 2),
                testGraph3.getGraphIdx(3, 3),
                testGraph3.getGraphIdx(2, 4),
                testGraph3.getGraphIdx(1, 5),
                testGraph3.getGraphIdx(0, 6),
                testGraph3.getGraphIdx(1, 7),
                testGraph3.getGraphIdx(0, 8),
                testGraph3.getGraphIdx(0, 9),
                testGraph3.getGraphIdx(0, 10),
                testGraph3.getGraphIdx(0, 11),
                testGraph3.getGraphIdx(1, 12),
                testGraph3.getGraphIdx(0, 13),
                testGraph3.getGraphIdx(1, 14),
                testGraph3.getGraphIdx(0, 15)
        };
        Assertions.assertThat(seam3).isEqualTo(testGraph3.seamFinder());
    }

    @Test
    public void testBlueFinder() throws Exception {
        testGraph1.setEnergyGrid();
        testGraph2.setEnergyGrid();
        testGraph3.setEnergyGrid();

        Node[] seam1 = {
                testGraph1.getGraphIdx(2, 0),
                testGraph1.getGraphIdx(1, 1),
                testGraph1.getGraphIdx(1, 2),
                testGraph1.getGraphIdx(1, 3),
                testGraph1.getGraphIdx(1, 4),
                testGraph1.getGraphIdx(1, 5),
                testGraph1.getGraphIdx(1, 6),
                testGraph1.getGraphIdx(0, 7)
        };
        Assertions.assertThat(seam1).isEqualTo(testGraph1.blueFinder());

        Node[] seam2 = {
                testGraph2.getGraphIdx(1, 0),
                testGraph2.getGraphIdx(0, 1),
                testGraph2.getGraphIdx(0, 2),
                testGraph2.getGraphIdx(0, 3),
                testGraph2.getGraphIdx(1, 4),
                testGraph2.getGraphIdx(1, 5),
                testGraph2.getGraphIdx(1, 6),
                testGraph2.getGraphIdx(0, 7),
                testGraph2.getGraphIdx(0, 8),
                testGraph2.getGraphIdx(0, 9),
                testGraph2.getGraphIdx(0, 10),
                testGraph2.getGraphIdx(0, 11),
                testGraph2.getGraphIdx(0, 12),
                testGraph2.getGraphIdx(0, 13),
                testGraph2.getGraphIdx(1, 14),
                testGraph2.getGraphIdx(0, 15)
        };
        Assertions.assertThat(seam2).isEqualTo(testGraph2.blueFinder());

        Node[] seam3 = {
                testGraph3.getGraphIdx(8, 0),
                testGraph3.getGraphIdx(8, 1),
                testGraph3.getGraphIdx(7, 2),
                testGraph3.getGraphIdx(7, 3),
                testGraph3.getGraphIdx(7, 4),
                testGraph3.getGraphIdx(8, 5),
                testGraph3.getGraphIdx(7, 6),
                testGraph3.getGraphIdx(7, 7),
                testGraph3.getGraphIdx(7, 8),
                testGraph3.getGraphIdx(6, 9),
                testGraph3.getGraphIdx(6, 10),
                testGraph3.getGraphIdx(6, 11),
                testGraph3.getGraphIdx(6, 12),
                testGraph3.getGraphIdx(6, 13),
                testGraph3.getGraphIdx(5, 14),
                testGraph3.getGraphIdx(5, 15)
        };
        Assertions.assertThat(seam3).isEqualTo(testGraph3.blueFinder());
    }

    @Test
    public void testHighlightNodes() throws Exception {
        testGraph1.setEnergyGrid();
        testGraph2.setEnergyGrid();

        Node[] test1 = testGraph1.seamFinder();
        Node[] test2 = testGraph1.blueFinder();
        Node[] test3 = testGraph2.seamFinder();

        testGraph1.highlightNodes(test1, Color.red);
        for(int i = 0; i < test1.length; i++) {
            Assertions.assertThat(test1[i].value).isEqualTo(Color.red);
        }

        testGraph1.highlightNodes(test2, Color.blue);
        for(int i = 0; i < test2.length; i++) {
            Assertions.assertThat(test2[i].value).isEqualTo(Color.blue);
        }

        testGraph2.highlightNodes(test3, Color.red);
        for(int i = 0; i < test3.length; i++) {
            Assertions.assertThat(test3[i].value).isEqualTo(Color.red);
        }
    }

    @Test
    public void testDelete() throws Exception {
        testGraph1.setEnergyGrid();
        testGraph2.setEnergyGrid();
        testGraph3.setEnergyGrid();

        Node[] del1 = testGraph1.seamFinder();
        Node[] del2 = testGraph2.seamFinder();
        Node[] del3 = testGraph3.blueFinder();

        testGraph1.delete(del1);
        Assertions.assertThat(testGraph1.toString()).isEqualTo(
                "255,242,0 - 255,242,0 - 153,217,234 - 153,217,234 - 153,217,234 - 255,255,255 - 255,255,255" + System.lineSeparator() +
                        "255,242,0 - 255,255,255 - 153,217,234 - 168,230,29 - 168,230,29 - 168,230,29 - 153,217,234" + System.lineSeparator() +
                        "153,217,234 - 153,217,234 - 168,230,29 - 255,194,14 - 156,90,60 - 255,194,14 - 168,230,29" + System.lineSeparator() +
                        "153,217,234 - 153,217,234 - 168,230,29 - 153,217,234 - 156,90,60 - 153,217,234 - 168,230,29" + System.lineSeparator() +
                        "153,217,234 - 153,217,234 - 153,217,234 - 153,217,234 - 156,90,60 - 153,217,234 - 153,217,234" + System.lineSeparator() +
                        "77,109,243 - 77,109,243 - 77,109,243 - 245,228,156 - 156,90,60 - 245,228,156 - 245,228,156" + System.lineSeparator() +
                        "77,109,243 - 77,109,243 - 77,109,243 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156" + System.lineSeparator() +
                        "77,109,243 - 77,109,243 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156" + System.lineSeparator()
        );

        testGraph2.delete(del2);
        Assertions.assertThat(testGraph2.toString()).isEqualTo(
                "245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156" + System.lineSeparator() +
                        "245,228,156 - 156,90,60 - 156,90,60 - 156,90,60 - 156,90,60 - 156,90,60 - 156,90,60 - 156,90,60 - 245,228,156 - 94,55,38 - 255,245,107 - 84,109,142 - 245,228,156 - 94,55,38 - 245,228,156" + System.lineSeparator() +
                        "245,228,156 - 156,90,60 - 153,0,48 - 70,70,70 - 47,54,153 - 136,139,181 - 112,222,255 - 156,90,60 - 245,228,156 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 245,228,156" + System.lineSeparator() +
                        "245,228,156 - 156,90,60 - 156,90,60 - 156,90,60 - 156,90,60 - 156,90,60 - 156,90,60 - 156,90,60 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156" + System.lineSeparator() +
                        "245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 156,90,60 - 20,56,11 - 161,9,20 - 156,90,60 - 245,228,156 - 70,70,70 - 70,70,70 - 70,70,70 - 70,70,70 - 70,70,70 - 245,228,156" + System.lineSeparator() +
                        "245,228,156 - 245,228,156 - 34,177,76 - 34,177,76 - 156,90,60 - 156,90,60 - 156,90,60 - 156,90,60 - 245,228,156 - 70,70,70 - 0,183,239 - 70,70,70 - 0,183,239 - 70,70,70 - 245,228,156" + System.lineSeparator() +
                        "245,228,156 - 245,228,156 - 156,90,60 - 156,90,60 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 70,70,70 - 70,70,70 - 70,70,70 - 70,70,70 - 70,70,70 - 245,228,156" + System.lineSeparator() +
                        "245,228,156 - 61,46,40 - 61,46,40 - 61,46,40 - 61,46,40 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 70,70,70 - 0,183,239 - 70,70,70 - 0,183,239 - 70,70,70 - 245,228,156" + System.lineSeparator() +
                        "245,228,156 - 61,46,40 - 111,49,152 - 16,131,166 - 61,46,40 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 70,70,70 - 70,70,70 - 70,70,70 - 70,70,70 - 70,70,70 - 245,228,156" + System.lineSeparator() +
                        "245,228,156 - 61,46,40 - 61,46,40 - 61,46,40 - 61,46,40 - 245,228,156 - 245,228,156 - 255,242,0 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156" + System.lineSeparator() +
                        "245,228,156 - 61,46,40 - 49,135,30 - 255,51,0 - 61,46,40 - 245,228,156 - 255,242,0 - 255,242,0 - 255,242,0 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156 - 245,228,156" + System.lineSeparator() +
                        "245,228,156 - 61,46,40 - 61,46,40 - 61,46,40 - 61,46,40 - 245,228,156 - 245,228,156 - 180,180,180 - 245,228,156 - 245,228,156 - 0,8,20 - 0,8,20 - 0,8,20 - 245,228,156 - 245,228,156" + System.lineSeparator() +
                        "245,228,156 - 61,46,40 - 2,23,54 - 111,49,152 - 61,46,40 - 245,228,156 - 245,228,156 - 180,180,180 - 245,228,156 - 0,8,20 - 0,8,20 - 0,8,20 - 0,8,20 - 0,8,20 - 245,228,156" + System.lineSeparator() +
                        "245,228,156 - 61,46,40 - 61,46,40 - 61,46,40 - 61,46,40 - 245,228,156 - 245,228,156 - 180,180,180 - 245,228,156 - 0,8,20 - 0,8,20 - 0,8,20 - 0,8,20 - 0,8,20 - 245,228,156" + System.lineSeparator() +
                        "94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38" + System.lineSeparator() +
                        "94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38 - 94,55,38" + System.lineSeparator()
        );

        testGraph3.delete(del3);
        Assertions.assertThat(testGraph3.toString()).isEqualTo(
                "54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 252,20,20 - 255,23,68 - 0,188,212 - 0,188,212 - 0,188,212 - 0,188,212 - 0,188,212 - 0,188,212 - 0,188,212" + System.lineSeparator() +
                        "255,23,68 - 255,23,68 - 255,23,68 - 255,23,68 - 255,23,68 - 255,23,68 - 255,23,68 - 255,23,68 - 255,23,68 - 255,23,68 - 255,23,68 - 255,23,68 - 255,23,68 - 255,23,68 - 255,23,68" + System.lineSeparator() +
                        "252,20,20 - 252,20,20 - 252,20,20 - 252,20,20 - 252,20,20 - 252,20,20 - 252,20,20 - 255,213,79 - 255,213,79 - 252,20,20 - 252,20,20 - 252,20,20 - 252,20,20 - 252,20,20 - 252,20,20" + System.lineSeparator() +
                        "252,20,20 - 252,20,20 - 252,20,20 - 252,20,20 - 252,20,20 - 252,20,20 - 255,213,79 - 255,213,79 - 255,213,79 - 255,213,79 - 252,20,20 - 252,20,20 - 252,20,20 - 252,20,20 - 252,20,20" + System.lineSeparator() +
                        "252,20,20 - 252,20,20 - 252,20,20 - 252,20,20 - 252,20,20 - 252,20,20 - 255,23,68 - 0,0,0 - 76,175,80 - 252,20,20 - 255,23,68 - 255,23,68 - 255,23,68 - 255,23,68 - 255,23,68" + System.lineSeparator() +
                        "252,20,20 - 252,20,20 - 252,20,20 - 252,20,20 - 252,20,20 - 252,20,20 - 255,23,68 - 76,175,80 - 76,175,80 - 255,23,68 - 255,23,68 - 0,0,0 - 0,0,0 - 0,0,0 - 0,0,0" + System.lineSeparator() +
                        "252,20,20 - 252,20,20 - 252,20,20 - 252,20,20 - 252,20,20 - 252,20,20 - 255,23,68 - 76,175,80 - 255,193,7 - 255,193,7 - 0,0,0 - 0,0,0 - 0,0,0 - 0,0,0 - 0,0,0" + System.lineSeparator() +
                        "252,20,20 - 252,20,20 - 252,20,20 - 158,158,158 - 158,158,158 - 252,20,20 - 255,23,68 - 156,39,176 - 156,39,176 - 255,23,68 - 0,0,0 - 0,0,0 - 56,53,56 - 158,158,158 - 144,164,174" + System.lineSeparator() +
                        "252,20,20 - 252,20,20 - 252,20,20 - 158,158,158 - 96,125,139 - 96,125,139 - 96,125,139 - 158,158,158 - 96,125,139 - 255,23,68 - 0,0,0 - 0,0,0 - 158,158,158 - 96,125,139 - 158,158,158" + System.lineSeparator() +
                        "255,23,68 - 255,23,68 - 255,23,68 - 255,23,68 - 96,125,139 - 96,125,139 - 158,158,158 - 158,158,158 - 96,125,139 - 255,23,68 - 0,0,0 - 0,0,0 - 102,98,102 - 158,158,158 - 176,171,130" + System.lineSeparator() +
                        "54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 96,125,139 - 96,125,139 - 96,125,139 - 54,40,36 - 54,40,36 - 0,0,0 - 0,0,0 - 0,0,0 - 0,0,0 - 0,0,0" + System.lineSeparator() +
                        "54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 255,152,0 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 0,0,0 - 0,0,0 - 0,0,0 - 0,0,0" + System.lineSeparator() +
                        "54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 255,152,0 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36" + System.lineSeparator() +
                        "54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 255,235,59 - 255,152,0 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36" + System.lineSeparator() +
                        "54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36" + System.lineSeparator() +
                        "54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36 - 54,40,36" + System.lineSeparator()
        );
    }

    @Test
    public void testAdd() {
        testGraph1.setEnergyGrid();
        testGraph2.setEnergyGrid();
        testGraph3.setEnergyGrid();

        Node[] del1 = testGraph1.seamFinder();
        Node[] del2 = testGraph2.seamFinder();
        Node[] del3 = testGraph3.blueFinder();
        Graph testDelGraph1 = testGraph1;
        Graph testDelGraph2 = testGraph2;
        Graph testDelGraph3 = testGraph3;
        testDelGraph1.delete(del1);
        testDelGraph2.delete(del2);
        testDelGraph3.delete(del3);

        testDelGraph1.add(del1);
        Assertions.assertThat(testDelGraph1).isEqualTo(testGraph1);

        testDelGraph2.add(del2);
        Assertions.assertThat(testDelGraph2).isEqualTo(testGraph2);

        testDelGraph3.add(del3);
        Assertions.assertThat(testDelGraph3).isEqualTo(testGraph3);
    }
}
